package main

var extpointsTemplate = `// generated by go-extpoints -- DO NOT EDIT
package {{.Package}}

import (
	"reflect"
	"sync"
)

func typeName(obj interface{}) string {
	return reflect.TypeOf(obj).Elem().Name()
}

var extensions = struct {
	sync.Mutex
	m map[string]*extensionPoint
}{
	m: make(map[string]*extensionPoint),
}

type extensionPoint struct {
	sync.Mutex
	iface      interface{}
	ifaceName  string
	extensions map[string]interface{}
}

func newExtensionPoint(i interface{}) *extensionPoint {
	ep := &extensionPoint{
		iface:      i,
		ifaceName:  typeName(i),
		extensions: make(map[string]interface{}),
	}
	extensions.Lock()
	defer extensions.Unlock()
	extensions.m[ep.ifaceName] = ep
	return ep
}

func (ep *extensionPoint) lookup(name string) (ext interface{}, ok bool) {
	ep.Lock()
	defer ep.Unlock()
	ext, ok = ep.extensions[name]
	return
}

func (ep *extensionPoint) all() map[string]interface{} {
	ep.Lock()
	defer ep.Unlock()
	registered := make(map[string]interface{})
	for k, v := range ep.extensions {
		registered[k] = v
	}
	return registered
}

func (ep *extensionPoint) register(extension interface{}) bool {
	return ep.registerNamed(extension, typeName(extension))
}

func (ep *extensionPoint) registerNamed(extension interface{}, name string) bool {
	ep.Lock()
	defer ep.Unlock()
	_, exists := ep.extensions[name]
	if exists {
		return !exists
	}
	ep.extensions[name] = extension
	return true
}

func implements(extension interface{}) []string {
	var ifaces []string
	for name, ep := range extensions.m {
		if reflect.TypeOf(extension).Implements(reflect.TypeOf(ep.iface).Elem()) {
			ifaces = append(ifaces, name)
		}
	}
	return ifaces
}

func RegisterNamed(extension interface{}, name string) []string {
	extensions.Lock()
	defer extensions.Unlock()
	var ifaces []string
	for _, iface := range implements(extension) {
		if ok := extensions.m[iface].registerNamed(extension, name); ok {
			ifaces = append(ifaces, iface)
		}
	}
	return ifaces
}

func Register(extension interface{}) []string {
	extensions.Lock()
	defer extensions.Unlock()
	var ifaces []string
	for _, iface := range implements(extension) {
		if ok := extensions.m[iface].register(extension); ok {
			ifaces = append(ifaces, iface)
		}
	}
	return ifaces
}

{{range .ExtensionPoints}}// {{.Name}}

var {{.Var}} = &{{.Type}}{
	newExtensionPoint(new({{.Name}})),
}

type {{.Type}} struct {
	*extensionPoint
}

func (ep *{{.Type}}) Register(extension {{.Name}}) bool {
	return ep.register(extension)
}

func (ep *{{.Type}}) RegisterNamed(extension {{.Name}}, name string) bool {
	return ep.registerNamed(extension, name)
}

func (ep *{{.Type}}) Lookup(name string) ({{.Name}}, bool) {
	ext, ok := ep.lookup(name)
	return ext.({{.Name}}), ok
}

func (ep *{{.Type}}) All() map[string]{{.Name}} {
	all := make(map[string]{{.Name}})
	for k, v := range ep.all() {
		all[k] = v.({{.Name}})
	}
	return all
}

{{end}}`
